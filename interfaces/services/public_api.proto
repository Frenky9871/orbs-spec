syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "protocol/client/requests.proto";
import "services/handlers/transaction_results.proto";

option serialize_messages = false;

// relies on TransactionPool, BlockStorage, VirtualMachine
service PublicApi {
    // implements interfaces for handling callbacks from other services
    option implement_handler = "handlers.TransactionResultsHandler";

    // called by ClientSdk
    rpc SendTransaction (SendTransactionInput) returns (SendTransactionOutput);
    rpc SendTransactionAsync (SendTransactionInput) returns (SendTransactionOutput);
    rpc RunQuery (RunQueryInput) returns (RunQueryOutput);
    rpc GetTransactionStatus (GetTransactionStatusInput) returns (GetTransactionStatusOutput);
    rpc GetTransactionReceiptProof (GetTransactionReceiptProofInput) returns (GetTransactionReceiptProofOutput);
    rpc GetBlock (GetBlockInput) returns (GetBlockOutput);
}

message SendTransactionInput {
    client.SendTransactionRequest client_request = 1;
}

message SendTransactionOutput {
    client.SendTransactionResponse client_response = 1;
}

message RunQueryInput {
    client.RunQueryRequest client_request = 1;
}

message RunQueryOutput {
    client.RunQueryResponse client_response = 1;
}

message GetTransactionStatusInput {
    client.GetTransactionStatusRequest client_request = 1;
}

message GetTransactionStatusOutput {
    client.GetTransactionStatusResponse client_response = 1;
}

message GetTransactionReceiptProofInput {
    client.GetTransactionReceiptProofRequest client_request = 1;
}

message GetTransactionReceiptProofOutput {
    client.GetTransactionReceiptProofResponse client_response = 1;
}

message GetBlockInput {
    client.GetBlockRequest client_request = 1;
}

message GetBlockOutput {
    client.GetBlockResponse client_response = 1;
}