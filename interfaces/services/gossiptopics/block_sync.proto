syntax = "proto3";
package gossiptopics;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services/gossiptopics";

import "../primitives/crypto.proto";
import "../protocol/gossipmessages/block_sync.proto";
import "../services/gossiptopics/all.proto";

option serialize_messages = false;

service BlockSync {
    // registration methods for external handlers that wish to receive callbacks
    option register_handler = "BlockSyncHandler";

    // called by anyone looking to send gossip messages
    rpc BroadcastBlockAvailabilityRequest (BlockAvailabilityRequestInput) returns (gossiptopics.EmptyOutput);
    rpc SendBlockAvailabilityResponse (BlockAvailabilityResponseInput) returns (gossiptopics.EmptyOutput);
    rpc SendBlockSyncRequest (BlockSyncRequestInput) returns (gossiptopics.EmptyOutput);
    rpc SendBlockSyncResponse (BlockSyncResponseInput) returns (gossiptopics.EmptyOutput);
}

service BlockSyncHandler {
    rpc HandleBlockAvailabilityRequest (BlockAvailabilityRequestInput) returns (gossiptopics.EmptyOutput);
    rpc HandleBlockAvailabilityResponse (BlockAvailabilityResponseInput) returns (gossiptopics.EmptyOutput);
    rpc HandleBlockSyncRequest (BlockSyncRequestInput) returns (gossiptopics.EmptyOutput);
    rpc HandleBlockSyncResponse (BlockSyncResponseInput) returns (gossiptopics.EmptyOutput);
}

message BlockAvailabilityRequestInput {
    gossipmessages.BlockAvailabilityRequestMessage message = 1;
}

message BlockAvailabilityResponseInput {
    primitives.node_address recipient_node_address = 1;
    gossipmessages.BlockAvailabilityResponseMessage message = 2;
}

message BlockSyncRequestInput {
    primitives.node_address recipient_node_address = 1;
    gossipmessages.BlockSyncRequestMessage message = 2;
}

message BlockSyncResponseInput {
    primitives.node_address recipient_node_address = 1;
    gossipmessages.BlockSyncResponseMessage message = 2;
}